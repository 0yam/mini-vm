{"name":"Mini-vm","tagline":"A small, register-based virtual machine (bytecode interpreter) in C.","body":"### A small vm for small projects\r\nMini-vm is a small (~300 SLOC) bytecode interpreter meant to be used as a starting point for home-made interpreted languages.\r\n\r\n\r\n----------------------------------------\r\n\r\n\r\n### How it works:\r\n- Each instruction has to be of the same 3-address format.\r\n- The VM has a dispatch table of function pointers that all have the same signature.\r\n- When the instruction is processed, its Instruction ID serves as an index into that dispatch table.\r\n- The instruction runs on the provided data, changes state where required, etc.\r\n\r\n\r\n### How the virtual machine is built:\r\n- The interpreter is a register-based machine, with a static number of registers set at compile time. *(can't exceed 255, due to bytecode format)*\r\n- The compiler for the VM is provided by the programmer.\r\n- Semantics of instructions are also left up to the programmer.\r\n- The VM only covers handling registers and instruction execution. It doesn't even try to address concurrency, stack ops, etc.\r\n\r\n\r\n### Instruction Format:\r\nEach instruction consists of 4 bytes, stored in little-endian byte order:\r\n\r\n      0   1   2   3\r\n    +---+---+---+---+\r\n    | A | B | C | D |\r\n    +---+---+---+---+\r\n\r\n\r\n - A - **Instruction ID.** This is the index of the function in the function table you wish to call.\r\n - B - **Register #1.** (usually the destination register)\r\n - C - **Register #2.** (usually an argument source register)\r\n - D - **Register #3.** (usually an argument source register)\r\n\r\n\r\n----------------------------------------\r\n\r\n\r\n### Get:\r\n```\r\n$ git clone https://github.com/philipaconrad/mini-vm.git\r\n```\r\n\r\n### Build:\r\n- **Linux-likes:**\r\n  If you're using a Linux-like platform (or Cygwin), just use `make` to build the Mini-vm example program. Use `make test` to generate sample bytecode and run the example program.\r\n- **Windows:**\r\n  If you're on a modern Windows platform and have MSVC 2010 installed, just go to the `/msvc` directory and double click on the **.vcxproj** file. MSVC should generate a solution file for you, all set up and ready to build.\r\n\r\n\r\n----------------------------------------\r\n\r\n\r\n### License\r\nMini-vm is under the liberal [MIT License][1], so hack away!\r\n\r\n\r\n### Authors and Contributors\r\nCurrently, Mini-vm is maintained by @philipaconrad. If you'd like to contribute, just make a pull request.\r\n\r\n\r\n### Support or Contact\r\nHaving trouble with Mini-vm? Check out the [issues page][2] and weâ€™ll help you sort it out.\r\n\r\n\r\n   [1]: http://opensource.org/licenses/MIT\r\n   [2]: https://github.com/philipaconrad/mini-vm/issues","google":"UA-40739915-1","note":"Don't delete this file! It's used internally to help with page regeneration."}